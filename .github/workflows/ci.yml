name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 prettier
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Check formatting with prettier
        run: |
          prettier --check .          

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Test with pytest
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/src
          python -m pytest --cov=src --cov-fail-under=80

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install dependencies
        run: npm install
        working-directory: ./frontend
      - name: Build
        run: npm run build
        working-directory: ./frontend

  integration:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: epv_test
          POSTGRES_USER: epv
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-asyncio httpx playwright websockets
      - name: Install Playwright browsers
        run: |
          playwright install chromium
      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend
      - name: Build frontend
        run: npm run build
        working-directory: ./frontend
      - name: Start backend server
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/src
          export DATABASE_URL=postgresql://epv:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/epv_test
          python -m uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
      - name: Start frontend server
        run: |
          npm start &
          sleep 15
        working-directory: ./frontend
      - name: Run integration tests
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/src
          python -m pytest -m integration --tb=short
        env:
          DATABASE_URL: postgresql://epv:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/epv_test
